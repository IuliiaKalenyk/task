{"version":3,"sources":["js/task_1.js","index.js"],"names":["b","console","log","c","valueB","Number","target","sum","i","max","clients","client","string","character","string1","matrix","total","length","j","fn","hotel","name","stars","capacity","key","houses","updatedHouses","slice","makeShef","dish","mango","poly","createCounter","privateValue","increment","counterA","counterB","sayHello","say","hello","sayHelloClosure"],"mappings":"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","file":"src.00462143.js","sourceRoot":"../src","sourcesContent":["const b = null;\nconsole.log(typeof b);\n\nconst c = 5;\nconsole.log(typeof c);\n\nconst valueB = 'random string';\nconsole.log(Number(valueB)); \nconsole.log(typeof Number(valueB));\n\nconst target = 3;\nlet sum = 0;\n\nfor (let i = 0; i <= target; i += 1) {\n  sum += i;\n}\n\nconsole.log(sum);\n\nconst max = 10;\n\nfor (let i = 0; i < max; i += 1) {\n  console.log(`${max} % ${i} = `, max % i);\n}\n\n/* const clients = ['Mango', 'Ajax', 'Poly'];\n\nfor (let i = 0; i < clients.length; i += 1) {\n  console.log('Logging clients: ', clients[i]);\n} */\n\nconst clients = ['Mango', 'Ajax', 'Poly'];\n\nfor (const client of clients) {\n  console.log(client);\n}\nconst string = 'javascript';\n\nfor (const character of string) {\n  console.log(character);\n}\n\nconst string1 = 'javascript' + 'evolytion';\n\nfor (const character of string1) {\n  console.log(character);\n}\n\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\nlet total = 0;\n\nfor (let i = 0; i < matrix.length; i += 1) {\n  console.log('Подмассив матрицы matrix[i]: ', matrix[i]);\n\n  for (let j = 0; j < matrix[i].length; j += 1) {\n    console.log('Элемент подмассива матрицы matrix[i][j]: ', matrix[i][j]);\n    total += matrix[i][j];\n  }\n}\n\nconsole.log(total);\n\nconst fn = () => {\n  console.log('Hello! :]');\n};\n\nconst hotel = {\n  name: 'Resort Hotel',\n  stars: 5,\n  capacity: 100,\n};\n\nfor (const key in hotel) {\n  console.log('Value: ', hotel[key]);\n}\n\nconst houses = ['Arryn', 'Frey', 'Greyjoy', 'Stark', 'Lannister', 'Tyrell'];\n\n// Вертикальная запись удобнее для чтения\nconst updatedHouses = [\n  ...houses.slice(0, 1),\n  'Frey of the Crossing',\n  ...houses.slice(2),\n];\n\nconsole.log(updatedHouses);\n// ['Arryn', 'Frey of the Crossing', 'Greyjoy', 'Stark', 'Lannister', 'Tyrell']\n\n\nconst makeShef = function (name) {\n  /*\n   * Параметр name это локальная переменная для функции makeShef.\n   * Это значит что она будет доступна функции makeDish через замыкание.\n   */\n  return function makeDish(dish) {\n    console.log(`${name} is cooking ${dish}`);\n  };\n};\n\nconst mango = makeShef('Mango');\nmango('apple pie'); // Mango is cooking apple pie\nmango('beef stew'); // Mango is cooking beef stew\n\nconst poly = makeShef('Poly');\npoly('pancakes'); // Poly is cooking pancakes\npoly('eggs and bacon'); // Poly is cooking eggs and \n\nconst createCounter = function () {\n  /*\n   * Локальная переменная privateValue доступна только в замыкании.\n   * Получить к ней доступ во внешнем коде невозможно.\n   */\n  let privateValue = 0;\n\n  const increment = function () {\n    privateValue += 1;\n    console.log(privateValue);\n  };\n\n  return {\n    increment,\n  };\n};\n\nconst counterA = createCounter();\ncounterA.increment(); // 1\ncounterA.increment(); // 2\n\nconst counterB = createCounter();\ncounterB.increment(); // 1\ncounterB.increment(); // 2\ncounterB.increment(); // 3\n\nfunction sayHello() {\n  var say = function() { console.log(hello); }\n  // Local variable that ends up within the closure \n  var hello = 'Hello, world!';\n  return say;\n}\nvar sayHelloClosure = sayHello(); \nsayHelloClosure(); // ‘Hello, world!’\n","import './sass/main.scss';\nimport './js/task_1.js';"]}